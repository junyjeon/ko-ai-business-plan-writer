이 프로그램은 사용자가 여러 곳에 분산된 정보(텍스트, 이미지, 링크, 동영상, 클립보드, 스크린샷 등)를 최소한의 노력으로 빠르게 수집한 뒤, 자동 정리와 검색을 통해 필요할 때 직관적으로 찾아 활용할 수 있게 하는 것이 목표.

한 줄 요약 :

사용자의 에너지를 최소화하면서 다양한 형태의 정보를 원클릭으로 수집·정리하고, 필요 시 직관적으로 찾아 활용할 수 있는 AI 기반 메모 & 정보 관리 생산성 소프트웨어.


가설:

"사용자는 정보를 모으고 싶어하지만, 정리는 귀찮아하고, 나중에 꼭 필요할 때 쉽고 빠르게 찾길 원한다."

- 여러 도구 사용으로 정보가 분산
- 정리 부담
- 필요할 때 찾기 어려움


가설 확장:

- 사용자들은 사용자가 본 곳, 공간, 인사이트, 팟캐스트 정보, 카페에서 들렸던 감미로운 노래, 영양제 정보, 건강 정보, 패션 정보, 헤어스타일 정보 등 과한 데이터가 난무하고 도파민 마케팅이 판을 치는 시대에서 사용자들은 쓸모있는 정보들을 기록하고 생각하고 있지 않다가 떠오르면 그게 뭐였더라- 하며 떠올리는데, 드문드문 글자를 잃어버리며 떠오를 때도 있으니 유의어와 LLM으로 검색할 수 있게 하며, 도구를 사용 시 렉이나 네트워크 로딩 같은 도구 때문에 생각이 휘발되는 경우가 없어야 한다. 
- 사용자들은 복잡한 정리 과정을 피하고 싶어한다.
- 사용자들은
- LLM, NLP 등을 활용해 수집 시점에 메타데이터(시간, 출처, URL 제목, favicon, 3가지 키워드, 한 줄 요약)를 자동 부여하면 정보 재활용이 쉬워진다.
- 아이폰, 안드로이드, 아이패드, PC 어디서든 수집하기 쉽고 찾아보기 쉬운 프로그램을 원한다.


Pain point:

1. 수집: 텍스트, 이미지, 링크, 동영상, 클립보드, 스크린샷 등을 매번 다른 앱으로 관리, 복붙 반복
2. 저장: 정보를 수집하고 바로 다른 정보를 수집하러 가는 과정에 딜레이
3. 검색: 저장 위치 헷갈림, 여러 앱 오가며 검색하는게 불편함.


니즈:

- 최소한의 노력으로 수집
- 직관적·통합적 검색
- 어디서든 접근 가능한 크로스 플랫폼
- Notion 처럼 렉 걸리고 복잡하지 않은(렉 걸리는 시간에 생각이 휘발된다)
- Obsidian 처럼 러닝커브가 크고 불친절하지 않은, 그리고 협업이 가능한 프로그램 


문제 해결:

- 단축키로 원클릭 수집
- 메타데이터(수집 시간, URL, 3가지 키워드) 활용
- 유의어 검색
- Rust로 성능 좋은 프로그램을 만들어주고
- UnoCSS로 불필요한 CSS를 제거해 빠른 동작이 가능하게 만들어주고
- VSCode의 Ctrl + D 기능인 다중 커서 기능을 가져와 편집을 효율적으로 만들어줌


목표:

- 사용자의 에너지를 최소화하고, 데이터 관리 효율성 극대화.


기록학:

- 진본성: 원본 보존, 출처 정보 저장
- 무결성: 자동 백업, 중복 방지
- 맥락성: 수집 당시 컨텍스트(탭 정보, 주변 검색어, 연관 콘텐츠) 자동 저장
- 검색성: 메타데이터 기반 다양한 검색(키워드, 맥락, 유의어)


Records Continuum Model 적용:

1. 데이터 수집(생산)
2. 메타데이터 부여(포착)
3. 체계적 정리(조직화)
4. 실제 활용(다원화)  
    → 이 흐름을 자동화, 자연스럽게 이어지게 함.


철학:

- "심플 is best"
- 접근성, 직관성 극대화
- 사용자의 작업 흐름 방해 X
- 사용자의 시간을 절약해주기
- 터치·클릭 횟수 최소화
- 기본 설정을 권장하는 설정으로 두고, 커스터마이즈 기능을 제공해 사용자의 불편함을 줄여주기.
- 정리는 프로그램이, 활용은 사용자가


코어기능:

1. 수집
   텍스트, 이미지, 링크, 동영상, 클립보드, 스크린샷
2. 정리
   수집 시간 순으로 정리
   도메인끼리 정리
   수집 요소 종류 별 정리
   이전 사이트의 제목을 기록한다던가 하는 맥락 정리(좋은 기능으로 만들기 어렵지 않을까?)
   좋은 생각 없을까?
3. 검색
   유의어 검색
4. 메모
   기본 텍스트 편집기
   Ctrl + D 다중 커서 기능
   메모 내용에 마우스로 스티커 붙이듯 북마크 기능
   메모 내용 하이라이트
5. 기타
   생산적 UI..
   크로스 플랫폼
   로컬 저장
   플러그인
   템플릿
   협업 기능
   클라우드 기능


UI:

- 벽돌형태 카드 vs  직사각형 카드
	PenCake
	https://play.google.com/store/apps/details?id=com.diffathy.bbapp&hl=ko
- 폰트
- 배경색


개발 스택:

- Frontend: Tauri, Vite, React+TypeScript, UnoCSS
- Backend: Rust, PostgreSQL or SQLite, Redis
- AI/NLP: 다형성
- 검색: Tantivy + LLM(다형성), ElasticSearch-rs
- 메모: Monaco Editor


시장 카테고리:

- Personal Knowledge Management(PKM 개인 지식 관리)
- Information Management Software(IMS 정보 관리 소프트웨어)
- 노코드 AI 플랫폼 서비스
- 디지털 아카이빙
- 메모 앱
- 생산성 소프트웨어


시장 포지션:


비즈니스 모델:

- 구독
- 결제
- 크롬 확장 프로그램
- 앱스토어
- 구글 플레이스토어


경쟁 제품:

- Notion
  렉걸림
  복잡함
- Obsidian
  너무 디지털 디지털 디지털 스러웠다.
  협업 기능 없음
  불편한 단순 기능들이 많음
- Evernote
- OneNote
- GoodNote
  아이패드 손가락 탭 뒤로가기 두번 누르는거 x
  생긴게 별로 마음에 안듬 손이 잘 안감 
- Readwise
  확장 프로그램으로 하이라이팅 하는 기능은 좋지만,
  그게 전부.
- Mymind
  너무 빈 공간이 많은 UI와
  무작위성이 큰 키워드 매김으로
  별로.
- Liner
  유튜브와 구글 요약은 좋지만 나머진 사용성이 별로.
  LLM의 성능이 애매하고
  AI 기능에만 집중해서 접근성과 가독성이 별로.
- PenCake(https://play.google.com/store/apps/details?id=com.diffathy.bbapp&hl=ko)
- TodoMate(https://play.google.com/store/apps/details?id=com.undefined.mate&hl=ko)
  폰트가 별로였고
  글씨가 너무 작았다.
- Timeblocks(https://timeblocks.com/)
- DailyTodo(https://apps.apple.com/kr/app/dailytodo-%EB%8D%B0%EC%9D%BC%EB%A6%AC%ED%88%AC%EB%91%90/id1461453227)
- Roam Research
- Logseq
- Pocket
- Instapaper


타겟:

- 메모하는 누구나
  학생
  창업가
  연구자
  크리에이터
  지식노동자


MVP:

- 아키텍쳐 설계
  - **크로스 플랫폼 데스크톱 앱 구조**:
    
    - **프론트엔드**: Tauri + Vite + React + TypeScript + UnoCSS
        - React로 전체 UI 개발
        - Tauri를 통해 크로스 플랫폼 데스크톱 앱 패키징 및 Native API 접근
        - UnoCSS로 가벼운 스타일링 지원
    - **백엔드(Native Core)**: Rust
        - 핵심 로직(데이터 처리, 검색 인덱싱, 메타데이터 분석, LLM 요청 관리)
        - Rust의 고성능/저메모리 활용
        - SQLite 또는 PostgreSQL 로컬 DB 사용
    - **AI/NLP 모듈**:
        - LLM 호출을 위한 API 연동(모델은 클라우드나 로컬 모델)
        - Rust→LLM API 호출 과정을 async/await로 비동기 처리
        - fasttext-rs나 rust-bert 등을 활용한 기본 NLP 기능
- **로드맵 기반 아키텍처 확장성**:
    
    - 초기엔 로컬 우선 구조(MVP): 로컬 DB + Alt+클릭 수집 + 기본 검색
    - 이후 클라우드 싱크, 협업 기능, 크롬 확장 프로그램 연동 고려
    - 브라우저 확장: 메시징 API를 통해 브라우저 → 데스크톱 앱 간 통신
- **비동기 Event-Driven 구조**:
    
    - 수집 이벤트 발생 시: 프론트엔드에서 백엔드로 IPC 호출 → Rust 백엔드에서 해당 URL/이미지/텍스트 분석 후 DB 저장 + LLM 호출(백그라운드)
    - NLP/LLM 처리도 별도 워커 스레드나 Task Queue를 둬서 UI를 블로킹하지 않음
- 데이터 설계
- 디자인 패턴
- UI/UX 설계 방향


로드맵:

- Phase 1(MVP): 수집, 저장, 기본 검색
- Phase 2: 메모, 북마크, 2차 추출, 유의어 검색
- Phase 3: UI 개선, 태그/폴더 기능, 메타데이터 자동 추출
- Phase 4: NLP/LLM 고급 분석, 협업/클라우드, API 공개, 플러그인 시스템, 템플릿
- Phase 5: 성능 최적화, 다국어 지원, 기업 솔루션, 마켓플레이스